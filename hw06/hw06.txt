The following program submission has been recorded:

Student: dlender
Class: CS159
Section: 29958
Assignment: hw06.c
Submission: 2021-04-12 22:10

If the above is incorrect, you are responsible for resubmitting the assignment or seeking assistance from a course staff member prior to the due date! Assignments will never be accepted by e-mail.

If this is for a lab assignment, only one member must be designated to make a submission for the group.  Graders will not evaluate submissions from multiple group members to determine which effort you actually want graded.

*** Please do not reply to this email ***

The contents of the submission:
     1	
     2	/***************************************************************************
     3	*
     4	*  Programmer and Purdue Email Address:
     5	*  1. dlender@purdue.edu
     6	*
     7	*  Homework #: 06
     8	*
     9	*  Academic Integrity Statement:
    10	*
    11	*  I have not used source code obtained from any other unauthorized source, 
    12	*  either modified or unmodified.  Neither have I provided access to my code 
    13	*  to another. The effort I am submitting is my own original work.
    14	*
    15	*  Day, Time, Location of Lab: Monday, 1:30 PM, SC231
    16	*
    17	*  Program Description: This program takes in 10 year variables and a day of the week.
    18	*                       using this it calculates the months that start with that day of the week in each year.
    19	*
    20	***************************************************************************/
    21	
    22	#include<stdio.h>
    23	#include<math.h>
    24	#define ARRAY 10
    25	
    26	void getInput(int inp[]);
    27	int getDow();
    28	void dowOutput(int dow, int option);
    29	int dayStart(int year);
    30	void checkDay(int dow, int startDay,int year);
    31	void output(int year);
    32	
    33	int main()
    34	{
    35	  int inp[ARRAY]; //defines an array of size 10 for the input
    36	  int dowStart; //defines the value for the starting day of the week
    37	  int counter; //defines a variable used for iterations in loops
    38	  //int month; //deines a value for the month
    39	  getInput(inp);
    40	
    41	  //do while loop to keep prompting for input until it is within the allowed range
    42	  do
    43	  {
    44	    dowStart = getDow();
    45	  } while ((dowStart < 0) || (dowStart > 6));
    46	  
    47	  dowOutput(dowStart,1);
    48	
    49	  //for loop to iterate the user defined functions 
    50	  for (counter = 0; counter < 10; counter++)
    51	  {
    52	    output(inp[counter]);
    53	    dowOutput((dowStart + counter) % 7, 0);
    54	    checkDay((dowStart + counter) % 7, dayStart(inp[counter]),inp[counter]);
    55	  }
    56	  dowOutput(dowStart,3);
    57	  return(0);
    58	}
    59	
    60	/***************************************************************************
    61	*
    62	*  Function Information
    63	*
    64	*  Name of Function: output()
    65	*
    66	*  Function Return Type:void
    67	*
    68	*  Parameters (list data type, name, and comment one per line):
    69	*    1.int year //defines the year taken from the input array
    70	*
    71	*  Function Description: Displays the output text and the corresponding year.
    72	*
    73	***************************************************************************/
    74	
    75	void output(int year)
    76	{
    77	  //displays the output text and corresponding year
    78	  printf("Months in %d starting on ",year);
    79	}
    80	
    81	/***************************************************************************
    82	*
    83	*  Function Information
    84	*
    85	*  Name of Function: getInput
    86	*
    87	*  Function Return Type: void
    88	*
    89	*  Parameters (list data type, name, and comment one per line):
    90	*    1.int inp[] - array for the inputted values
    91	*
    92	*  Function Description: This function takes in the input values as an array
    93	*
    94	***************************************************************************/
    95	
    96	void getInput(int inp[])
    97	{
    98	  int counter; //variable to keep track of iterations in the for loop
    99	  
   100	  //displays the prompt and saves each input using a for loop and an array
   101	  printf("Enter 10 years [1700 - 2100] -> ");
   102	
   103	  for(counter = 0; counter < 10; counter++)
   104	  {
   105	    scanf("%d", &inp[counter]);
   106	  }
   107	  return;
   108	}
   109	
   110	/***************************************************************************
   111	*
   112	*  Function Information
   113	*
   114	*  Name of Function: getDow
   115	*
   116	*  Function Return Type: int
   117	*
   118	*  Parameters (list data type, name, and comment one per line):
   119	*
   120	*  Function Description: This function gets the day of the week from the user and checks if it is valid.
   121	*
   122	***************************************************************************/
   123	
   124	int getDow()
   125	{
   126	  int dow; //variable defining the day of the week value
   127	  //displays a prompt and looks for the response
   128	
   129	  printf("Enter day of week number -> ");
   130	  scanf("%d", &dow);
   131	
   132	  //checks if the inputted value is within the allowed range
   133	  if((dow < 0) || (dow > 6))
   134	  {
   135	    //displays an error message
   136	    printf("\nError! Day of the week must be 0 to 6\n\n");
   137	  }
   138	  return(dow);
   139	}
   140	
   141	/***************************************************************************
   142	*
   143	*  Function Information
   144	*
   145	*  Name of Function: dowOutput()
   146	*
   147	*  Function Return Type: void
   148	*
   149	*  Parameters (list data type, name, and comment one per line):
   150	*    1. int dow //inputted day of the week value
   151	*    2. int option //option variable allows the funciton to display the day of the week with different text
   152	*    3.
   153	*
   154	*  Function Description: This function displays the day of the week.
   155	*
   156	***************************************************************************/
   157	
   158	void dowOutput(int dow, int option)
   159	{ 
   160	  //checks which option is selected and prints the appropriate statement
   161	  if (option == 3)
   162	  {
   163	    printf("\n");
   164	  }
   165	  else
   166	  {
   167	    //checks the day of the week value and prints the corresponding day
   168	    if (option == 1)
   169	    {
   170	      printf("\nDesired day of the week: ");
   171	    }
   172	    if(dow == 0)
   173	    {
   174	      printf("Sunday");
   175	    }
   176	    if(dow == 1)
   177	    {
   178	      printf("Monday");
   179	    }
   180	    if(dow == 2)
   181	    {
   182	      printf("Tuesday");
   183	    }
   184	    if(dow == 3)
   185	    {
   186	      printf("Wednesday");
   187	    }
   188	    if(dow == 4)
   189	    {
   190	      printf("Thursday");
   191	    }
   192	    if(dow == 5)
   193	    {
   194	      printf("Friday");
   195	    }
   196	    if(dow == 6)
   197	    {
   198	      printf("Saturday");
   199	    }
   200	    if (option == 1)
   201	    {
   202	      printf("\n");
   203	    }
   204	    if (option == 0)
   205	    {
   206	      printf(": ");
   207	    }
   208	  }
   209	}
   210	
   211	/***************************************************************************
   212	*
   213	*  Function Information
   214	*
   215	*  Name of Function: dayStart()
   216	*
   217	*  Function Return Type: int
   218	*
   219	*  Parameters (list data type, name, and comment one per line):
   220	*    1. int year //the inputed year from the array
   221	*
   222	*  Function Description: This function calculates the day of the week for the first day of the year.
   223	*
   224	***************************************************************************/
   225	
   226	int dayStart(int year)
   227	{
   228	  double dayStart; //defines the numerical value of the day from the previous year
   229	  double yearfl = year; //sets the year as a float
   230	  //calculates the start day
   231	
   232	  dayStart = ((yearfl - 1) * 365 + ((yearfl - 1) / 4) - ((yearfl - 1) / 100) + ((yearfl - 1) / 400));
   233	  dayStart = (int)dayStart % 7;
   234	
   235	  //adds one to the last day if the year is a leap year
   236	  if ((year - 1) % 4 == 0)
   237	  {
   238	    if ((year - 1) % 100 != 0 || (year - 1) % 400 == 0)
   239	    {
   240	      dayStart = dayStart + 1;
   241	    }
   242	  }
   243	  dayStart++;  
   244	  //printf("\nday start %lf",dayStart);
   245	  return(dayStart); //returns the start day as an int
   246	}
   247	
   248	/***************************************************************************
   249	*
   250	*  Function Information
   251	*
   252	*  Name of Function: checkDay()
   253	*
   254	*  Function Return Type: void
   255	*
   256	*  Parameters (list data type, name, and comment one per line):
   257	*    1.int dow //variable for the day of the week
   258	*    2.int startDay //variable for the day of the week of January 1st
   259	*    3.int year //variable for the year
   260	*
   261	*  Function Description: Calculates which the first day of the week for every month, and displays the months that start with the given day.
   262	*
   263	***************************************************************************/
   264	
   265	void checkDay(int dow, int startDay,int year)
   266	{
   267	  //uses an if statement to check if the day of the week is the same as that of the first day of the month
   268	  if (startDay == dow)
   269	  {
   270	    //displays the month
   271	    printf("January ");
   272	  }
   273	  //adds the difference in the days of the week to the total running count of the day of the week
   274	  startDay = (startDay + 3) % 7;
   275	  if (startDay == dow)
   276	  {
   277	    printf("February ");
   278	  }
   279	  if ((year) % 4 == 0)
   280	  {
   281	    if ((year) % 100 != 0 || (year) % 400 == 0)
   282	    {
   283	      startDay++;
   284	    }
   285	  }
   286	  if (startDay == dow)
   287	  {
   288	    printf("March ");
   289	  }
   290	  startDay = (startDay + 3) % 7;
   291	  if (startDay == dow)
   292	  {
   293	    printf("April ");
   294	  }
   295	  startDay = (startDay + 2) % 7;
   296	  if (startDay == dow)
   297	  {
   298	    printf("May ");
   299	  }
   300	  startDay = (startDay + 3) % 7;
   301	  if (startDay == dow)
   302	  {
   303	    printf("June ");
   304	  }  
   305	  startDay = (startDay + 2) % 7;
   306	  if(startDay == dow)
   307	  {
   308	    printf("July ");
   309	  }
   310	  startDay = (startDay + 3) % 7;
   311	  if (startDay == dow)
   312	  {
   313	    printf("August ");
   314	  }
   315	  startDay = (startDay + 3) % 7;
   316	  if (startDay == dow)
   317	  {
   318	    printf("September ");
   319	  }
   320	  startDay = (startDay + 2) % 7;
   321	  if (startDay == dow)
   322	  {
   323	    printf("October ");
   324	  }
   325	  
   326	  startDay = (startDay + 3) % 7;
   327	  if (startDay == dow)
   328	  {
   329	    printf("November ");
   330	  }
   331	  startDay = (startDay + 2) % 7;
   332	  if (startDay == dow)
   333	  {
   334	    printf("December ");
   335	  }
   336	  printf("\n");
   337	}
   338	
