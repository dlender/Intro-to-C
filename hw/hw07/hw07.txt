The following program submission has been recorded:

Student: dlender
Class: CS159
Section: 29958
Assignment: hw07.c
Submission: 2021-04-26 22:21

If the above is incorrect, you are responsible for resubmitting the assignment or seeking assistance from a course staff member prior to the due date! Assignments will never be accepted by e-mail.

If this is for a lab assignment, only one member must be designated to make a submission for the group.  Graders will not evaluate submissions from multiple group members to determine which effort you actually want graded.

*** Please do not reply to this email ***

The contents of the submission:
     1	/***************************************************************************
     2	*
     3	*  Programmer and Purdue Email Address:
     4	*  1. dlender@purdue.edu
     5	*
     6	*  Homework #:7
     7	*
     8	*  Academic Integrity Statement:
     9	*
    10	*  I have not used source code obtained from any other unauthorized source, 
    11	*  either modified or unmodified.  Neither have I provided access to my code 
    12	*  to another. The effort I am submitting is my own original work.
    13	*
    14	*  Day, Time, Location of Lab: Monday, 1:30 PM, SC231
    15	*
    16	*  Program Description:This program takes in up to 35 integer values and 
    17	*  repeatedly calculates the iterations of the formula needed for it to reach 0. 
    18	*  The program also calculates the first power of 2 each value reaches. 
    19	*  Then according to user selection it displays the values in order.
    20	*
    21	***************************************************************************/
    22	
    23	#include<stdio.h>
    24	#include<math.h>
    25	#define ROWS 2
    26	#define COLM 35
    27	
    28	int getSort(); 
    29	int inputInt(int inp[][35]);
    30	int calcVals(int value, int sortOption);
    31	void sortFunc(int inp[][35], int elements, int option);
    32	void output(int inp[][35],int max,int sortOption);
    33	void setZeros(int inp[][35],int max);
    34	
    35	int main()
    36	{
    37	  int inp[ROWS][COLM]; //defines an array of row size 2 and column size 35 for the input
    38	  int sortOption; //defines a variable for the sorting option number
    39	  int i = 0; //defines a variable used for iterations in loops
    40	  int max; //defines a variable for the maximum size
    41	
    42	  //do while loop to keep prompting for input until it is one of the two acceptable inputs
    43	  do
    44	  {
    45	    sortOption = getSort();
    46	  } while ((sortOption != 1) && (sortOption != 2));
    47	
    48	  max = inputInt(inp);
    49	  setZeros(inp,max);
    50	
    51	  //for loop to iterate the user defined function calculating the second dimension of the array
    52	  for(i = 0; i < COLM; i++)
    53	  {
    54	    if ((inp[0][i] == 0) || (inp[0][i] == -1))
    55	    {
    56	      max = i;
    57	      i = COLM;
    58	    }
    59	    else
    60	    {
    61	      inp[1][i] = calcVals(inp[0][i],sortOption);
    62	    }
    63	  }
    64	
    65	  sortFunc(inp,COLM,0);
    66	  sortFunc(inp,COLM,1);
    67	  output(inp,max,sortOption);
    68	  return(0);
    69	}
    70	
    71	/***************************************************************************
    72	*
    73	*  Function Information
    74	*
    75	*  Name of Function: setZeros
    76	*
    77	*  Function Return Type: void
    78	*
    79	*  Parameters (list data type, name, and comment one per line):
    80	*    1. int inp[][35] - 2-dimensional array for the input values
    81	*    2. int max //defines the maximum size of the array
    82	*
    83	*  Function Description: This function removes all extra values after the correct values in the array.
    84	*
    85	***************************************************************************/
    86	
    87	void setZeros(int inp[][35],int max)
    88	{
    89	  int i = 0; //variable to keep track of iterations in the while loop
    90	  do
    91	  {
    92	    inp[0][max] = 0;
    93	    ++max;
    94	  } while (max < COLM);
    95	  do
    96	  {
    97	    inp[1][i] = 0;
    98	    ++i;
    99	  } while(i < COLM);
   100	
   101	}
   102	
   103	/***************************************************************************
   104	*
   105	*  Function Information
   106	*
   107	*  Name of Function: getSort
   108	*
   109	*  Function Return Type: int
   110	*
   111	*  Parameters (list data type, name, and comment one per line):
   112	*    1. int sort //defines the sorting type
   113	
   114	*
   115	*  Function Description: This function takes in the input values for the sort type and checks it it is valid.
   116	*
   117	***************************************************************************/
   118	
   119	int getSort()
   120	{
   121	  int sort; //variable defining the sort type
   122	  printf("Enter sorting option (1) count or (2) power of two -> ");
   123	  scanf("%d",&sort);
   124	  if((sort != 1) && (sort != 2))
   125	  {
   126	    printf("\nError! Enter option 1 or 2 only!\n\n");
   127	  }
   128	  return(sort);
   129	}
   130	
   131	/***************************************************************************
   132	*
   133	*  Function Information
   134	*
   135	*  Name of Function: inputInt
   136	*
   137	*  Function Return Type: int
   138	*
   139	*  Parameters (list data type, name, and comment one per line):
   140	*    1. int inp[][35] - 2-dimensional array for the input values
   141	
   142	*
   143	*  Function Description: This function takes in the input values as an array.
   144	*
   145	***************************************************************************/
   146	
   147	int inputInt(int inp[][35])
   148	{
   149	  int x = 0; //variable iterating the index within the columns
   150	  int i = 0; //variable to keep track of iterations in the for loop 
   151	  printf("Enter up to 35 integer values -> ");
   152	  //do while loop is used to get an input and then replace each index in the array with the new value
   153	  do
   154	  {
   155	    scanf("%d",&inp[0][x]);
   156	    //if statement is used to end the loop if -1 s inputted
   157	    if(inp[0][x] == -1)
   158	    {
   159	      x = 36;
   160	    }
   161	    x++;
   162	  } while (x < 35);
   163	  //x = 0;
   164	
   165	  for(i = 0; i < 35; i++)
   166	  {
   167	    if(inp[0][i] == -1)
   168	    {
   169	      x = i;
   170	    }
   171	  }
   172	  return(x);
   173	}
   174	
   175	/***************************************************************************
   176	*
   177	*  Function Information
   178	*
   179	*  Name of Function: calcVals
   180	*
   181	*  Function Return Type: int
   182	*
   183	*  Parameters (list data type, name, and comment one per line):
   184	*    1. int value //defines the input value from the input array
   185	*    2. int sortOption //defines the value of the sorting option
   186	*
   187	*  Function Description: This function calculates the values for the second row based on the sorting option.
   188	*
   189	***************************************************************************/
   190	
   191	int calcVals(int value, int sortOption)
   192	{
   193	  int counter = 0; //variable to keep track of the number of applications
   194	  int x = 0; //variable to keep track of iterations in the for loop
   195	  int power; //varible for the power value reached
   196	  if (sortOption == 1)
   197	  {
   198	    while(value > 1)
   199	    {
   200	      if (value % 2 == 1)
   201	      {
   202	        value = value * 3 + 1;
   203	      }
   204	      else
   205	      {
   206	        value = value / 2;
   207	      }
   208	      ++counter;
   209	    }
   210	  }
   211	  if (sortOption == 2)
   212	  {
   213	    while(value > 1)
   214	    {
   215	      for (x = 11;x >= 0; x--)
   216	      {
   217	        power = pow(2,x);
   218	        if(value == power)
   219	        {
   220	          counter = value;
   221	          value = 0;
   222	        }
   223	      }
   224	      if (value % 2 == 1)
   225	      {
   226	        value = value * 3 + 1;
   227	      }
   228	      else
   229	      {
   230	        value = value / 2;
   231	      }
   232	    }
   233	  }
   234	  return(counter);
   235	}
   236	
   237	/***************************************************************************
   238	*
   239	*  Function Information
   240	*
   241	*  Name of Function: output
   242	*
   243	*  Function Return Type: int
   244	*
   245	*  Parameters (list data type, name, and comment one per line):
   246	*    1. int inp[][35] - 2-dimensional array for the input value 
   247	*    2. int max //defines the maximum size value
   248	*    3. int sortOption //defines the value of the sorting option
   249	*
   250	*  Function Description: This function outputs the sorted values
   251	*
   252	***************************************************************************/
   253	
   254	void output(int inp[][35],int max,int sortOption)
   255	{
   256	  int i;  //variable to keep track of iterations in the for loop
   257	  if (sortOption == 2)
   258	  {
   259	    printf("\nSorted data by power of two: ");
   260	  }
   261	  if (sortOption == 1)
   262	  {
   263	    printf("Sorted data by count: ");
   264	  }
   265	  if (max == 36)
   266	  {
   267	    --max;
   268	  }
   269	  for(i = (35 - max); i < 35;i++)
   270	  {
   271	    printf("%d ",inp[0][i]);
   272	  }
   273	  printf("\n");
   274	}
   275	
   276	/***************************************************************************
   277	*
   278	*  Function Information
   279	*
   280	*  Name of Function: sortFunc
   281	*
   282	*  Function Return Type: int
   283	*
   284	*  Parameters (list data type, name, and comment one per line):
   285	*    1. int inp[][35] - 2-dimensional array for the input value 
   286	*    2. int elements //defines the number of elements in a row
   287	*    3. int option //defines an option variable
   288	
   289	*
   290	*  Function Description: This function uses the insertion sorting method to correctly sort the values in the array.
   291	*
   292	***************************************************************************/
   293	
   294	void sortFunc(int inp[][35], int elements, int option)
   295	{
   296	  int walk; //variable used for insertion sorting
   297	  int temp; //variable for a temporary placeholder
   298	  int smallest; //variable for the smallest index of the list 
   299	  int current; //variable for the current index of the list
   300	  
   301	  for(current = 0; current < elements; current++)
   302	  {
   303	    smallest = current;
   304	    for(walk = current + 1; walk < elements; walk++)
   305	    {
   306	      if (option == 1)
   307	      {
   308	        if((inp[0][walk] < inp[0][smallest]) && (inp[1][walk] == inp[1][smallest]))
   309	        {
   310	          smallest = walk;
   311	        }
   312	      }
   313	      else
   314	      {
   315	        if(inp[1][walk] < inp[1][smallest])
   316	        {
   317	          smallest = walk;
   318	        }
   319	      }
   320	    }
   321	    temp = inp[1][current];
   322	    inp[1][current] = inp[1][smallest];
   323	    inp[1][smallest] = temp;
   324	
   325	    temp = inp[0][current];
   326	    inp[0][current] = inp[0][smallest];
   327	    inp[0][smallest] = temp;  
   328	  }
   329	}