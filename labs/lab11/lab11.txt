The following program submission has been recorded:

Student: dlender
Class: CS159
Section: 29958
Assignment: lab11.c
Submission: 2021-04-30 20:43

If the above is incorrect, you are responsible for resubmitting the assignment or seeking assistance from a course staff member prior to the due date! Assignments will never be accepted by e-mail.

If this is for a lab assignment, only one member must be designated to make a submission for the group.  Graders will not evaluate submissions from multiple group members to determine which effort you actually want graded.

*** Please do not reply to this email ***

The contents of the submission:
     1	/***************************************************************************
     2	*
     3	*  Programmers and Purdue Email Addresses:
     4	*  1. hoke5@purdue.edu
     5	*  2. smonge@purdue.edu
     6	*  3. dlender@purdue.edu
     7	*
     8	*  Lab #: 10
     9	*
    10	*  Academic Integrity Statement:
    11	*
    12	*  We have not used source code obtained from any other unauthorized source,
    13	*  either modified or unmodified.  Neither have we provided access to our code
    14	*  to another. The effort we are submitting is our own original work.
    15	*
    16	*  Day, Time, Location of Lab: Monday, 1:30 PM, SC231
    17	*
    18	*  Program Description: This program takes in 20 or less input values, arranges the array into even and odd numbers, sorts it out from smallest to largest, and gets the sum of the array for each value mod size of the array.
    19	*
    20	***************************************************************************/
    21	
    22	#include <stdio.h>
    23	//Global Variable Declaration
    24	#define ARR_SIZE 20
    25	
    26	//Function Declarations
    27	void getInp(int inp[], int* );
    28	int oddEven(int inp [],int);
    29	void sortFunct(int inp[],int, int);
    30	void Outp1(int inp[],int);
    31	
    32	int main(void) 
    33	{
    34	  //Local Declarations
    35	  int inp[ARR_SIZE]; // input array
    36	  int elements = 0; //elements in the array
    37	  int evenEl; //elements in the array that are even 
    38	  
    39	  getInp(inp,&elements);
    40	  evenEl = oddEven(inp,elements);
    41	  sortFunct(inp,evenEl,elements);
    42	  Outp1(inp,elements);
    43	  return(0);
    44	}
    45	
    46	/***************************************************************************
    47	*
    48	*  Function Information
    49	*
    50	*  Name of Function: getInp()
    51	*
    52	*  Function Return Type: void
    53	*
    54	*  Parameters (list data type, name, and comment one per line):
    55	*    1.int inp[] - user input array 
    56	*    2.int* elements - elements in the array
    57	*
    58	*  Function Description: This function receives the input integer values. 
    59	*
    60	***************************************************************************/
    61	
    62	void getInp(int inp[], int* elements)
    63	{
    64	  //LOCAL DECLARATIONS
    65	  int counter; // Counter for for loop 
    66	  //EXECUTABLE STATEMENTS 
    67	  printf("Enter up to 20 integer values -> ");
    68	  //uses a for loop to save each inputted value to an array
    69	  for(counter = 0; counter < ARR_SIZE; counter++)
    70	  {
    71	    scanf("%d",&inp[counter]);
    72	    *elements = *elements + 1;
    73	    if(inp[counter] == -1)
    74	    {
    75	      counter = 100;
    76	      *elements = *elements - 1;
    77	    }
    78	  }
    79	  return;
    80	}
    81	
    82	/***************************************************************************
    83	*
    84	*  Function Information
    85	*
    86	*  Name of Function: oddEven
    87	*
    88	*  Function Return Type: int
    89	*
    90	*  Parameters (list data type, name, and comment one per line):
    91	*    1.int inp[] - user input array 
    92	*    2.int elements - elements in the array
    93	*
    94	*  Function Description: This function arranges the even elements first in the array and then outputs the number of elements that are even. 
    95	*
    96	***************************************************************************/
    97	
    98	int oddEven(int inp [],int elements)
    99	{
   100	  //Local Declarations
   101	  int counter; // control variable for loops
   102	  int i; //index of where next even number will be moved to
   103	  int temp; //variable that holds the value of the current number being moved
   104	
   105	  i = 0;
   106	  //uses a for loop and an if statement to check wether each value is even
   107	  for(counter = 0; counter < elements; counter++) 
   108	  {
   109	    if(inp[counter] % 2 == 0)
   110	    {
   111	      temp = inp[i];
   112	      inp[i] = inp[counter];
   113	      inp[counter] = temp;
   114	      i++;
   115	    }
   116	  }
   117	  return(i);
   118	}
   119	
   120	/***************************************************************************
   121	*
   122	*  Function Information
   123	*
   124	*  Name of Function: sortFunct
   125	*
   126	*  Function Return Type: void
   127	*
   128	*  Parameters (list data type, name, and comment one per line):
   129	*    1.int inp[] - user input array 
   130	*    2.int evenEl - elements of the array that are even 
   131	*    3.int elements - elements in the array
   132	*
   133	*  Function Description: This function sorts the even values in ascending order and then the odd values in ascending order. (Function taken out of CS 159 book, Computer Science: A Structured Aprroach Using C) 
   134	*
   135	***************************************************************************/
   136	
   137	void sortFunct(int inp [], int evenEl,int elements)
   138	{
   139	  //Local Declarations
   140	  int smallest; //smallest element in the unsorted list
   141	  int temp; //variable that holds the value of the current number being moved
   142	  int current = 0; //control variable for loops
   143	  int walk; //variable used in loop
   144	
   145	  //Loops and Calculations
   146	  if(inp[current] % 2 == 0)
   147	  {
   148	    for(current = 0; current < evenEl; current++)
   149	    {
   150	      smallest = current;
   151	      for(walk = current + 1; walk < evenEl; walk++)
   152	      {
   153	        if(inp[walk] < inp[smallest]) 
   154	        {
   155	          smallest = walk;
   156	        }
   157	      }
   158	      temp = inp[current];
   159	      inp[current] = inp[smallest];
   160	      inp[smallest] = temp;
   161	    }
   162	  }
   163	
   164	  for(current = evenEl; current < elements; current++)
   165	  {
   166	    smallest = current;
   167	    for(walk = current + 1; walk < elements; walk++)
   168	    {
   169	      if(inp[walk] < inp[smallest]) 
   170	      {
   171	        smallest = walk;
   172	      }
   173	    }
   174	    temp = inp[current];
   175	    inp[current] = inp[smallest];
   176	    inp[smallest] = temp;
   177	  }
   178	  return;
   179	}
   180	
   181	/***************************************************************************
   182	*
   183	*  Function Information
   184	*
   185	*  Name of Function: oddEven
   186	*
   187	*  Function Return Type: int
   188	*
   189	*  Parameters (list data type, name, and comment one per line):
   190	*    1.int inp[] - user input array 
   191	*    2.int elements - elements in the array
   192	*
   193	*  Function Description: This function gives out the output for the sorted array and the calculated sum of the array numbers mod size of the array. 
   194	*
   195	***************************************************************************/
   196	
   197	void Outp1(int inp[],int elements)
   198	{
   199	  //Local Declarations
   200	  int counter; //control variable for loops
   201	  int sumIndex; //index for current value being calculated for the sum
   202	  int sumEl = 0; //Sum of elements
   203	
   204	 //Calcuations and Print Statements
   205	  printf("\nSorted array: ");
   206	  
   207	  for(counter = 0; counter < elements; counter++)
   208	  {
   209	    printf("%d ",inp[counter]);
   210	    sumIndex = inp[counter] % elements;
   211	    sumEl += inp[sumIndex];
   212	  }
   213	  if (inp[counter + 1] == -1)
   214	  {
   215	    counter = elements;
   216	  }
   217	  printf("\nCalculated sum: %d\n",sumEl);
   218	}
Course standards violations detected:
 -4.0 Pointers were not declared in the program
 -4.0 All output points lost due to improper technique
