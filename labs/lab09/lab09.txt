The following program submission has been recorded:

Student: dlender
Class: CS159
Section: 29958
Assignment: lab09.c
Submission: 2021-04-09 16:44

If the above is incorrect, you are responsible for resubmitting the assignment or seeking assistance from a course staff member prior to the due date! Assignments will never be accepted by e-mail.

If this is for a lab assignment, only one member must be designated to make a submission for the group.  Graders will not evaluate submissions from multiple group members to determine which effort you actually want graded.

*** Please do not reply to this email ***

The contents of the submission:
     1	/***************************************************************************
     2	*
     3	*  Programmers and Purdue Email Addresses:
     4	*  1. hoke5@purdue.edu
     5	*  2. smonge@purdue.edu
     6	*  3. dlender@purdue.edu
     7	*
     8	*  Lab #: 09
     9	*
    10	*  Academic Integrity Statement:
    11	*
    12	*  We have not used source code obtained from any other unauthorized source,
    13	*  either modified or unmodified.  Neither have we provided access to our code
    14	*  to another. The effort we are submitting is our own original work.
    15	*
    16	*  Day, Time, Location of Lab: Monday, 1:30 PM, SC231
    17	*
    18	*  Program Description: This program takes in 20 input values and converts odd values to binary and even values to octals.
    19	*
    20	***************************************************************************/
    21	
    22	#include <stdio.h>
    23	#include <math.h>
    24	#define ARR_SIZE 20 //defines the size of the input array
    25	
    26	void getInput(int inp[]);
    27	int findBinary(int);
    28	int findOctal(int);
    29	int oddEven(int);
    30	void printResults(int);
    31	void printNumbers(int, int, int*);
    32	void noneFunc(int number, int check);
    33	
    34	int main(void) 
    35	{
    36	  int inp[ARR_SIZE]; //defines the input array 
    37	  int counter; //defines a variable to keep track of loop iterations
    38	  int numBin; //defines a variable to be used for the binary value
    39	  int numOct; //defines a variable to be used for the octal value
    40	
    41	  //printf("number: ");
    42	  //scanf("%d",&number);
    43	  //newNumber = findBinary(number);
    44	  getInput(inp); //gets the input and returns an array
    45	  //uses the input array to check if the numbers or even or odd
    46	  // and saves the new calculated values to the array
    47	  for(counter = 0; counter < ARR_SIZE; counter++)
    48	  {
    49	    inp[counter] = oddEven(inp[counter]);
    50	  }
    51	
    52	  //displays the output text and uses a for loop to iterate through
    53	  // the array and check if each value is an binary that should be displayed now
    54	  printResults(1);
    55	  numBin = 0;
    56	  for(counter = 0; counter < ARR_SIZE; counter++)
    57	  {
    58	    printNumbers(inp[counter], 1, &numBin);
    59	  }
    60	  noneFunc(numBin,0);
    61	
    62	  //iterates through the loop and chekcs if each value is an octal and should be printed
    63	  printResults(0);
    64	  numOct = 0;
    65	  for(counter = 0; counter < ARR_SIZE; counter++)
    66	  {
    67	    printNumbers(inp[counter], 0, &numOct);
    68	  }
    69	  noneFunc(numOct,1);
    70	  return 0;
    71	}
    72	/***************************************************************************
    73	*
    74	*  Function Information
    75	*
    76	*  Name of Function: noneFunc()
    77	*
    78	*  Function Return Type: void
    79	*
    80	*  Parameters (list data type, name, and comment one per line):
    81	*    1.int number - user input number 
    82	*    2.int check - temporary variable used to print another line break
    83	*
    84	*  Function Description: This function prints out the desired message when
    85	*  either no binary or octal values is found. 
    86	*
    87	***************************************************************************/
    88	
    89	void noneFunc(int number, int check)
    90	{
    91	  //checks if the number of outputs is 0, if it is displays that there are no outputs
    92	  if (number == 0)
    93	  {
    94	    printf("None\n");
    95	  }
    96	  else
    97	  {
    98	    printf("\n");
    99	  }
   100	  //checks if it is the octal values beind displayed and prints another line break
   101	  if (check == 1)
   102	  {
   103	    printf("\n");
   104	  }
   105	  return;
   106	}
   107	
   108	/***************************************************************************
   109	*
   110	*  Function Information
   111	*
   112	*  Name of Function: printNumbers
   113	*
   114	*  Function Return Type: void
   115	*
   116	*  Parameters (list data type, name, and comment one per line):
   117	*    1.int number - variable for the calculated value in the array
   118	*    2.int binOct - variable used to check if the number is octal or binary
   119	*    3.int numBinOct - variable passed by parameters used to check if there is output 
   120	*
   121	*  Function Description: This function checks if the numbers in the array are binary or octal, and displays them accordingly.
   122	*
   123	***************************************************************************/
   124	
   125	void printNumbers(int number, int binOct, int *numBinOct)
   126	{
   127	  //uses an if statement to check if the values are binary or octal
   128	  if ((number % 2) == binOct)
   129	  {
   130	    //displays the according set of values
   131	    printf("%d ",number);
   132	    //adds 1 to numBinOct to tell the main function that there is an output
   133	    *numBinOct = *numBinOct + 1;
   134	  }
   135	  return;
   136	}
   137	
   138	/***************************************************************************
   139	*
   140	*  Function Information
   141	*
   142	*  Name of Function: printResults
   143	*
   144	*  Function Return Type: void
   145	*
   146	*  Parameters (list data type, name, and comment one per line):
   147	*    1.int binOct - variable used to tell the function which statement to display
   148	*
   149	*  Function Description: This function displays the text statements describing the outputs.
   150	*
   151	***************************************************************************/
   152	
   153	void printResults(int binOct)
   154	{
   155	  //binOct is bin if == 1, oct if == 0
   156	  //uses an if statement to check which input is given and displays the corresponding output
   157	  if (binOct == 1)
   158	  {
   159	    printf("\nBinary values: ");
   160	  }
   161	  else
   162	  {
   163	    printf("Octal values: ");
   164	  }
   165	  return;
   166	}
   167	
   168	/***************************************************************************
   169	*
   170	*  Function Information
   171	*
   172	*  Name of Function: oddEven
   173	*
   174	*  Function Return Type: int
   175	*
   176	*  Parameters (list data type, name, and comment one per line):
   177	*    1.int number - variable for the inputted value from the input array
   178	*
   179	*  Function Description: This function checks if the inputted value is odd or even and calculates
   180	*                       the corresponding binary or octal value.
   181	*
   182	***************************************************************************/
   183	
   184	int oddEven(int number)
   185	{
   186	  int newNumber; //variable for the new calculated value
   187	
   188	  //uses an if statement to check if the value is even or odd
   189	  if((number % 2) == 1)
   190	  {
   191	    //uses nested functions to calculated the corresponding binary value
   192	    newNumber = findBinary(number);
   193	  }
   194	  else
   195	  {
   196	    newNumber = findOctal(number);
   197	  }
   198	
   199	  return(newNumber);
   200	}
   201	
   202	/***************************************************************************
   203	*
   204	*  Function Information
   205	*
   206	*  Name of Function: getInput
   207	*
   208	*  Function Return Type: void
   209	*
   210	*  Parameters (list data type, name, and comment one per line):
   211	*    1.int inp[] - array for the inputted values
   212	*
   213	*  Function Description: This function takes in the input values as an array
   214	*
   215	***************************************************************************/
   216	
   217	void getInput(int inp[])
   218	{
   219	  int counter; //variable to keep track of iterations in the for loop
   220	  
   221	  //displays the prompt and saves each input using a for loop and an array
   222	  printf("Enter 20 integer values -> ");
   223	  for(counter = 0; counter < 20; counter ++)
   224	  {
   225	    scanf("%d", &inp[counter]);
   226	  }
   227	  return;
   228	}
   229	
   230	/***************************************************************************
   231	*
   232	*  Function Information
   233	*
   234	*  Name of Function: findBinary 
   235	*
   236	*  Function Return Type: int
   237	*
   238	*  Parameters (list data type, name, and comment one per line):
   239	*    1.int input - variable defining the input from the array
   240	*
   241	*  Function Description: This function calculates calculates the binary value from a decimal value.
   242	*
   243	***************************************************************************/
   244	
   245	int findBinary(int input)
   246	{
   247	  int tempInput; //temporary value used to calculate the binary output
   248	  int quotient; //temporary value used to calculate the binary output
   249	  int digit; //temporary value used to calculate the binary output
   250	  int binNumber; //temporary value used to calculate the binary output
   251	  int decPlace; //temporary value used to calculate the binary output
   252	
   253	  binNumber = 0;
   254	  decPlace = 0;
   255	  tempInput = input;
   256	  while(tempInput > 0)
   257	  {
   258	    quotient = tempInput / 2;
   259	    digit = tempInput % 2;
   260	    
   261	    binNumber = binNumber + digit * pow(10, decPlace);
   262	
   263	    tempInput = quotient;
   264	    decPlace++;
   265	  }
   266	  return(binNumber);
   267	}
   268	
   269	/***************************************************************************
   270	*
   271	*  Function Information
   272	*
   273	*  Name of Function: findOctal 
   274	*
   275	*  Function Return Type: int
   276	*
   277	*  Parameters (list data type, name, and comment one per line):
   278	*    1.int input - variable defining the input from the array
   279	*
   280	*  Function Description: 
   281	*
   282	***************************************************************************/
   283	
   284	int findOctal(int input)
   285	{
   286	  int tempInput; //temporary variable used to calculate the octal
   287	  int quotient; //temporary variable used to calculate the octal
   288	  int digit; //temporary variable used to calculate the octal
   289	  int octal; //variable defining the calculated octal value
   290	
   291	  tempInput = input;
   292	  octal = input % 8;
   293	  while(tempInput > 0)
   294	  {
   295	    quotient = tempInput / 8;
   296	    digit = quotient % 8;
   297	    
   298	    if (quotient == 0)
   299	    {
   300	      octal = octal + digit * pow(10, round(log10(input)));
   301	    }
   302	    else
   303	    {
   304	      octal = octal + digit * pow(10, round((log10(input) - log10(quotient))));
   305	    }
   306	    tempInput = quotient;
   307	  }
   308	  return(octal);
   309	}
