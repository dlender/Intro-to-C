The following program submission has been recorded:

Student: dlender
Class: CS159
Section: 29958
Assignment: lab05.c
Submission: 2021-03-05 19:11

If the above is incorrect, you are responsible for resubmitting the assignment or seeking assistance from a course staff member prior to the due date! Assignments will never be accepted by e-mail.

If this is for a lab assignment, only one member must be designated to make a submission for the group.  Graders will not evaluate submissions from multiple group members to determine which effort you actually want graded.

*** Please do not reply to this email ***

The contents of the submission:
     1	/***************************************************************************
     2	*
     3	*  Programmers and Purdue Email Addresses:
     4	*  1. cpoukey@purdue.edu
     5	*  2. zrohm@purdue.edu
     6	*  3. dlender@purdue.edu
     7	*
     8	*  Lab #: 5
     9	*
    10	*  Academic Integrity Statement:
    11	*
    12	*  We have not used source code obtained from any other unauthorized source,
    13	*  either modified or unmodified.  Neither have we provided access to our code
    14	*  to another. The effort we are submitting is our own original work.
    15	*
    16	*  Day, Time, Location of Lab: Monday, 13:30 ET, SC 231
    17	*
    18	*  Program Description: This program calculates the angles and quadrilateral 
    19	*                       areas using user inputted coordinates for the vertices of a triangle
    20	*
    21	***************************************************************************/
    22	
    23	//Imports math and stdio libraries for later use
    24	#include<stdio.h>
    25	#include<math.h>
    26	
    27	//GLOBAL DECLARATIONS
    28	double getCoord(char axis, int num);
    29	double calcDist(double x1, double y1, double x2, double y2);
    30	double calcCenter(double coord1, double coord2, double coord3, double dist12, double dist23, double dist31);
    31	double law_cos(double a, double b, double c);
    32	double areaQuad(double kiteLength, double angle);
    33	void output2(void);
    34	void outputAngle(double angle,char comma);
    35	void outputAreas(double areaA, double areaB, double areaC);
    36	
    37	int main()
    38	{
    39	  //LOCAL DECLARATIONS
    40	  double x1; //Variable for the first x coordinate 
    41	  double y1; //Variable for the first y coordinate
    42	  double x2; //Variable for second x coordinate
    43	  double y2; //Variable for second y coordinate
    44	  double x3; //Variable for third x coordinate 
    45	  double y3; //Variable for third y coordinate
    46	  double distAB; //Variable for distance between points A and B
    47	  double distBC; //Variable for distance between points B and C
    48	  double distCA; //Variable for distance between points C and A
    49	  double xCenter; //Variable for x coord of centroid of triangle
    50	  double yCenter; //Variable for y coord of centroid of triangle
    51	  double kiteLengthA; //Variable for kite length A of triangle
    52	  double kiteLengthB; //Variable for kite length B of triangle
    53	  double kiteLengthC; //Variable for kite length C of triangle
    54	  double angleA; //Variable for angle A of triangle
    55	  double angleB; //Variable for angle B of triangle
    56	  double angleC; //Variable for angle C of triangle
    57	  double areaA; //Variable for the area of quadrilateral A
    58	  double areaB; //Variable for the area of quadrilateral B
    59	  double areaC; //Variable for the area of quadrilaterla C
    60	
    61	  //EXECUTABLE STATEMENTS
    62	  //Gets (X, Y) of point 1 of the triangle as user input
    63	  x1 = getCoord('X', 1);
    64	  y1 = getCoord('Y', 1);
    65	
    66	  //Gets (X, Y) of point 2 of the triangle as user input
    67	  x2 = getCoord('X', 2);
    68	  y2 = getCoord('Y', 2);
    69	
    70	  //Gets (X, Y) of point 3 of the triangle as user input
    71	  x3 = getCoord('X', 3);
    72	  y3 = getCoord('Y', 3);
    73	
    74	  //Uses distance formula to calculate triangle side lengths
    75	  distAB = calcDist(x1, y1, x2, y2);
    76	  distBC = calcDist(x2, y2, x3, y3);
    77	  distCA = calcDist(x3, y3, x1, y1);
    78	
    79	  //Calculates centroid of triangle using X or Y coords of points and side lengths
    80	  xCenter = calcCenter(x1, x2, x3, distAB, distBC, distCA);
    81	  yCenter = calcCenter(y1, y2, y3, distAB, distBC, distCA);
    82	
    83	  //Uses distance formula to calculate kite height lengths
    84	  kiteLengthA = calcDist(x1, y1, xCenter, yCenter);
    85	  kiteLengthB = calcDist(x2, y2, xCenter, yCenter);
    86	  kiteLengthC = calcDist(x3, y3, xCenter, yCenter);
    87	
    88	  //Calculates main angles of triangle
    89	  angleB = law_cos(distAB, distBC, distCA);
    90	  angleA = law_cos(distCA, distAB, distBC);
    91	  angleC = law_cos(distBC, distCA, distAB);
    92	
    93	  //Calls function to print outputs
    94	  output2();
    95	  outputAngle(angleA,',');
    96	  outputAngle(angleB,',');
    97	  outputAngle(angleC,' ');
    98	
    99	  areaA = areaQuad(kiteLengthA, angleA);
   100	  areaB = areaQuad(kiteLengthB, angleB);
   101	  areaC = areaQuad(kiteLengthC, angleC);
   102	
   103	  outputAreas(areaA, areaB, areaC);
   104	  
   105	  //Returns the integer 0, effectively terminating the main function
   106	  return(0);
   107	}
   108	
   109	/***************************************************************************
   110	*
   111	*  Function Information
   112	*
   113	*  Name of Function: getCoord
   114	*
   115	*  Function Return Type: double
   116	*
   117	*  Parameters (list data type, name, and comment one per line):
   118	*    1. char axis - Informs user of whether to input the X or Y coordinate
   119	*    2. int num - Informs user of which point the coordinate refers to
   120	*
   121	*  Function Description: This function takes integer user input that
   122	*                        corresponds to a specified X or Y of a single
   123	*                        coordinate. This integer is then returned to
   124	*                        main function.
   125	*
   126	***************************************************************************/
   127	double getCoord(char axis, int num)
   128	{
   129	  double coord; //Declares variable for user-inputted X or Y coordinate
   130	
   131	  //Gets X or Y of specified coordinate from user
   132	  printf("Enter %c coordinate #%d -> ", axis, num);
   133	  scanf("%lf", &coord);
   134	
   135	  //Returns X or Y coordinate integer to the main function
   136	  return coord;
   137	}
   138	
   139	/***************************************************************************
   140	*
   141	*  Function Information
   142	*
   143	*  Name of Function: calcDist
   144	*
   145	*  Function Return Type: double
   146	*
   147	*  Parameters (list data type, name, and comment one per line):
   148	*    1. double x1 - X coordinate of first point
   149	*    2. double y1 - Y coordinate of first point
   150	*    3. double x2 - X coordinate of second point
   151	*    4. double y2 - Y coordinate of second point
   152	*
   153	*  Function Description: This function calculates the distance between two
   154	*                        point via a straight line. The equation used is
   155	*                        derived from the pythagorean theorem. The distance
   156	*                        is then returned.
   157	*
   158	***************************************************************************/
   159	double calcDist(double x1, double y1, double x2, double y2)
   160	{
   161	  double dist; //Declares variable for calculated distance
   162	
   163	  //Calculates the distance between two points
   164	  dist =  sqrt(pow(x2 - x1, 2) + pow(y2 - y1, 2));
   165	
   166	  //Returns the distance to the main function
   167	  return(dist);
   168	}
   169	
   170	/***************************************************************************
   171	*
   172	*  Function Information
   173	*
   174	*  Name of Function: calcCenter
   175	*
   176	*  Function Return Type: double
   177	*
   178	*  Parameters (list data type, name, and comment one per line):
   179	*    1. double coord1 - Stores either X or Y coord of point 1
   180	*    2. double coord2 - Stores either X or Y coord of point 2
   181	*    3. double coord3 - Stores either X or Y coord of point 3
   182	*    4. double dist12 - Distance between points 1 and 2
   183	*    5. double dist23 - Distance between points 2 and 3
   184	*    6. double dist31 - Distance between points 3 and 1
   185	*
   186	*  Function Description: This function uses a standard weighted midpoint
   187	*                        equation to calculate the incenter of either the
   188	*                        X or Y coordinate depending on the values passed.
   189	*                        The incenter X or Y coordinate is then returned.
   190	*
   191	***************************************************************************/
   192	double calcCenter(double coord1, double coord2, double coord3, double dist12, double dist23, double dist31)
   193	{
   194	  double center; //Declares variable for either X or Y center coordinate
   195	  
   196	  //Calculates either X or Y center coordinate
   197	  center = (dist23 * coord1 + dist31 * coord2 + dist12 * coord3) / (dist12 + dist23 + dist31);
   198	
   199	  //Returns either X or Y center coordinate
   200	  return(center);
   201	}
   202	
   203	/***************************************************************************
   204	*
   205	*  Function Information
   206	*
   207	*  Name of Function: law_cos
   208	*
   209	*  Function Return Type: double
   210	*
   211	*  Parameters (list data type, name, and comment one per line):
   212	*    1. double a - Length of the side opposite angle A
   213	*    2. double b - Length of the side opposite angle B
   214	*    3. double c - Length of the side opposite angle C
   215	*
   216	*  Function Description: This function calculates an angle of a triangle
   217	*                        given the side lengths of the triangle by using the
   218	*                        law of cosine.
   219	*
   220	***************************************************************************/
   221	double law_cos(double a, double b, double c)
   222	{
   223	  double angle; //Defines the calculated angle
   224	
   225	  //Calculates the final angle using the law of cosines
   226	  angle = acos((pow(a, 2) + pow(b , 2) - pow(c , 2)) / (2 * a * b)) * 180 / M_PI;
   227	
   228	  return angle;
   229	}
   230	
   231	/***************************************************************************
   232	*
   233	*  Function Information
   234	*
   235	*  Name of Function: output_angle
   236	*
   237	*  Function Return Type: void
   238	*
   239	*  Parameters (list data type, name, and comment one per line):
   240	*    1. double angle
   241	*
   242	*  Function Description: This function calculates the respective
   243	*                        minutes and seconds given an angle in degrees.
   244	*                        The calculations and the angle are then outputted.
   245	*
   246	***************************************************************************/
   247	
   248	void outputAngle(double angle, char comma)
   249	{
   250	  int min; //defines variable for angle minutes
   251	  double sec; //defines variable for angle seconds
   252	  int angle_int; //defines a variable to set the angle to an integer
   253	  
   254	  //calculates the angle minutes and seconds
   255	  angle_int = angle;
   256	  min = (angle - angle_int) * 60;
   257	  sec = (angle - angle_int - min / 60.0) * 3600;
   258	
   259	  //Uses print statements to output passed parameters
   260	  printf("%d%c%c %d %.2lf\"%c ", (int) angle_int, 0xc2, 0xB0, (int) min, sec,comma);
   261	}
   262	
   263	/***************************************************************************
   264	*
   265	*  Function Information
   266	*
   267	*  Name of Function: areaQuad
   268	*
   269	*  Function Return Type: double
   270	*
   271	*  Parameters (list data type, name, and comment one per line):
   272	*    1. double kiteLength
   273	*    2. double angle
   274	*
   275	*  Function Description: This function calculates the area of a quadrilateral
   276	*                        using inputted the inputted diagonal of the kite and angle.
   277	*
   278	***************************************************************************/
   279	
   280	double areaQuad(double kiteLength, double angle)
   281	{
   282	  double area; //defines the variable for calculated area
   283	  //calculates area using diagonal length and the angle
   284	  area = pow(kiteLength, 2) * sin(angle * M_PI / 360) * cos(angle * M_PI / 360);
   285	  return(area);
   286	}
   287	
   288	/***************************************************************************
   289	*
   290	*  Function Information
   291	*
   292	*  Name of Function: outputAreas
   293	*
   294	*  Function Return Type: void
   295	*
   296	*  Parameters (list data type, name, and comment one per line):
   297	*    1. double areaA
   298	*    2. double areaB
   299	*    3. double areaC
   300	*
   301	*  Function Description: This program displays the area of the quadrilaterals.
   302	*
   303	***************************************************************************/
   304	
   305	void outputAreas(double areaA, double areaB, double areaC)
   306	{
   307	  //displays the quadrilateral areas
   308	  printf("\nArea of quadrilaterals: %.2lf, %.2lf, %.2lf\n\n", areaA, areaB, areaC);
   309	}
   310	
   311	/***************************************************************************
   312	*
   313	*  Function Information
   314	*
   315	*  Name of Function: output2
   316	*
   317	*  Function Return Type: void
   318	*
   319	*  Parameters (list data type, name, and comment one per line):
   320	*    1. void
   321	*
   322	*  Function Description: This program displays the text for the internal triangle angles.
   323	*
   324	***************************************************************************/
   325	
   326	void output2(void)
   327	{
   328	  //displays the text for internal triangle angles
   329	  printf("Internal triangle angles: ");
   330	}