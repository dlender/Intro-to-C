The following program submission has been recorded:

Student: dlender
Class: CS159
Section: 29958
Assignment: hw05.c
Submission: 2021-03-29 21:46

If the above is incorrect, you are responsible for resubmitting the assignment or seeking assistance from a course staff member prior to the due date! Assignments will never be accepted by e-mail.

If this is for a lab assignment, only one member must be designated to make a submission for the group.  Graders will not evaluate submissions from multiple group members to determine which effort you actually want graded.

*** Please do not reply to this email ***

The contents of the submission:
     1	
     2	/***************************************************************************
     3	*
     4	*  Programmer and Purdue Email Address:
     5	*  1. dlender@purdue.edu
     6	*
     7	*  Homework #: 5
     8	*
     9	*  Academic Integrity Statement:
    10	*
    11	*  I have not used source code obtained from any other unauthorized source, 
    12	*  either modified or unmodified.  Neither have I provided access to my code 
    13	*  to another. The effort I am submitting is my own original work.
    14	*
    15	*  Day, Time, Location of Lab: Monday 1:30 SC
    16	*
    17	*  Program Description: This program takes an input for the year and occurance number and displays the corresponding week.
    18	*
    19	***************************************************************************/
    20	
    21	#include<stdio.h>
    22	#include<math.h>
    23	
    24	int dayStart(int year);
    25	int month(int dayNumb, int year, int *day, int tracker);
    26	int firstDate(int occur);
    27	int lastDate(int occur);
    28	int dayWeek(int dayNumb, int startDay);
    29	void output();
    30	void outputWeek(int selector);
    31	void outputYear(int year);
    32	void monthCalc(int month_num);
    33	void printDates(int date, int first_day);
    34	void dateOrder(int date, int dow, int month, int year);
    35	int getYear();
    36	int getOccur();
    37	int checkOccur(int occur, int year, int* newYear, int* tracker);
    38	
    39	int main()
    40	{
    41	  int year; //definest the year
    42	  int occur; //defines the occurence number 
    43	  int last_date; //defines the date of the last day of the week
    44	  int first_date; //defines the date of the first day of the week
    45	  int start_day; //defines the day of the week for the first day of the year
    46	  int month_num; //defines the month number
    47	  int first_dow; //defines the day for the first day of the week
    48	  int first_day_numb; //defines the number of the first day
    49	  int second_day_numb; //defines the number of the last day
    50	  int newYear; //defines the new year
    51	  int newOccur; //defines the new occurence
    52	  int trackYear; //defines a variable to trackl the year function
    53	
    54	  year = getYear();
    55	  occur = getOccur();
    56	
    57	  start_day = dayStart(year);
    58	  last_date = lastDate(occur);
    59	  first_date = firstDate(occur);
    60	
    61	  outputWeek(1);
    62	  first_dow = dayWeek(first_date,start_day);
    63	  month_num = month(first_date,year,&first_day_numb, 0);
    64	  outputYear(year);
    65	  outputWeek(2);
    66	  dayWeek(last_date,start_day);
    67	  newOccur = checkOccur(occur, year, &newYear, &trackYear);
    68	  last_date = lastDate(newOccur);
    69	  month(last_date,newYear,&second_day_numb, trackYear);
    70	
    71	  outputYear(newYear);
    72	  monthCalc(month_num);
    73	  output();
    74	  printDates(first_day_numb,first_dow);
    75	  dateOrder(first_day_numb + 1, start_day, month_num,year);
    76	
    77	  return(0);
    78	}
    79	
    80	/***************************************************************************
    81	*
    82	*  Function Information
    83	*
    84	*  Name of Function: checkOccur()
    85	*
    86	*  Function Return Type: int
    87	*
    88	*  Parameters (list data type, name, and comment one per line):
    89	*    1. int occur //defines the occurence number
    90	*    2. int year //defines the year
    91	*    3. int* newYear //pass by parameters to define the new year
    92	*    4. int* tracker //pass by parameter a tracker for use in a later function
    93	*
    94	*  Function Description: This function checks if the week number is greater than 52,
    95	*                       and if it is, then it sets the occurence number to 1 and adds to the year.
    96	*
    97	***************************************************************************/
    98	
    99	int checkOccur(int occur, int year, int* newYear, int* tracker)
   100	{
   101	  if(occur > 52) //checks if the occurence is greater than 52
   102	  { 
   103	    //sets the year and occurence to the following year
   104	    occur = occur - 52;
   105	    *newYear = year + 1;
   106	    *tracker = 1; //sets the tracker equal to one, to be used in the month function
   107	  }
   108	
   109	  else
   110	  {
   111	    *newYear = year;
   112	  }
   113	
   114	  return occur;
   115	}
   116	
   117	/***************************************************************************
   118	*
   119	*  Function Information
   120	*
   121	*  Name of Function: dateOrder()
   122	*
   123	*  Function Return Type: int
   124	*
   125	*  Parameters (list data type, name, and comment one per line):
   126	*    1. int date //defines the number of the date
   127	*    2. int dow //defines the number for the day of the week
   128	*    3. int month //defines the month
   129	*    4. int year //defines the year
   130	*
   131	*  Function Description: This function checks if the day is in the next month and converts,
   132	*                         then it displays the day using the proper formatting.
   133	*
   134	***************************************************************************/
   135	
   136	void dateOrder(int date, int dow, int month, int year)
   137	{
   138	  int x = 2; //defines a variable for the while loop
   139	  int prev = date; //defines a variable for the previous date
   140	  int leap; //defines a variable for checking if its a leap year
   141	  while (x < 8) //while loop for each day of the week
   142	  {
   143	    if (date == 32 && month == 1) //checks if the date is greater than the days in the month
   144	    {
   145	      date = 1; //if it is then it sets the date to 0 
   146	    }
   147	    if ((!(year % 4) && (year % 100)) || !(year % 400)) //checks if the year is a leap year
   148	    {
   149	      leap = 1;
   150	      if (date == 30 && month == 2)
   151	      {
   152	        date = 1;
   153	      }
   154	    }
   155	    if (date == 29 && month == 2 && leap == 0)
   156	    {
   157	      date = 1;
   158	    }
   159	    if (date == 32 && month == 3)
   160	    {
   161	      date = 1;
   162	    }
   163	    if (date == 31 && month == 4)
   164	    {
   165	      date = 1;
   166	    }
   167	    if (date == 32 && month == 5)
   168	    {
   169	      date = 1;
   170	    }
   171	    if (date == 31 && month == 6)
   172	    {
   173	      date = 1;
   174	    }
   175	    if (date == 31 && month == 7)
   176	    {
   177	      date = 1;
   178	    }
   179	    if (date == 32 && month == 8)
   180	    {
   181	      date = 1;
   182	    }
   183	    if (date == 31 && month == 9)
   184	    {
   185	      date = 1;
   186	    }
   187	    if (date == 32 && month == 10)
   188	    {
   189	      date = 1;
   190	    }
   191	    if (date == 31 && month == 11)
   192	    {
   193	      date = 1;
   194	    }
   195	    if (date == 32 && month == 12)
   196	    {
   197	      date = 1;
   198	    }
   199	    if (7 - x - dow != 0) //checks to see if the displays are at the end of the line
   200	    {
   201	      if (prev - 1 > 9) //checks the previous date length to determine the spacing format
   202	      {
   203	        printf("  %d",date);
   204	      }
   205	      else
   206	      {
   207	        printf("   %d", date);
   208	      }
   209	    }
   210	    else
   211	    {
   212	      printf("\n"); //if the display is at the end of the line it displays a line break
   213	      printf(" %d",date);
   214	    }
   215	    x = x + 1; //adds 1 to the x iteration
   216	    date = date + 1; //adds 1 to the date beind displayed
   217	    prev = date; //sets the previous date equal to the new date
   218	  }  
   219	  printf("\n");
   220	}
   221	
   222	/***************************************************************************
   223	*
   224	*  Function Information
   225	*
   226	*  Name of Function:getYear()
   227	*
   228	*  Function Return Type: int
   229	*
   230	*  Parameters (list data type, name, and comment one per line):
   231	*
   232	*  Function Description: Displays a prompt, then saves and gets the year input.
   233	*
   234	***************************************************************************/
   235	
   236	int getYear()
   237	{
   238	  int year; //defines the variable for the year
   239	
   240	  printf("Enter year number -> ");
   241	  scanf("%d",&year);
   242	
   243	  return year;
   244	}
   245	
   246	/***************************************************************************
   247	*
   248	*  Function Information
   249	*
   250	*  Name of Function:getOccur()
   251	*
   252	*  Function Return Type:int
   253	*
   254	*  Parameters (list data type, name, and comment one per line):
   255	*
   256	*  Function Description: Displays a prompt then saves and gets the occurence input.
   257	*
   258	***************************************************************************/
   259	
   260	int getOccur()
   261	{
   262	  int occur; //defines the variable for occurance
   263	
   264	  printf("Enter occurrence number -> "); //displays the prompt
   265	  scanf("%d",&occur); //saves the occurance
   266	
   267	  return occur;
   268	}
   269	
   270	/***************************************************************************
   271	*
   272	*  Function Information
   273	*
   274	*  Name of Function:lastDate()
   275	*
   276	*  Function Return Type:int
   277	*
   278	*  Parameters (list data type, name, and comment one per line):
   279	*    1.int occur //defines the occurance number
   280	*
   281	*  Function Description: This function calculates the last date using the occurance
   282	*
   283	***************************************************************************/
   284	
   285	int lastDate(int occur)
   286	{
   287	  int lastDate; //defines a variable for the numerical year number
   288	  
   289	  lastDate = occur * 7;
   290	  return lastDate;
   291	}
   292	
   293	/***************************************************************************
   294	*
   295	*  Function Information
   296	*
   297	*  Name of Function:firstDate()
   298	*
   299	*  Function Return Type: int
   300	*
   301	*  Parameters (list data type, name, and comment one per line):
   302	*    1. int firstDate
   303	*
   304	*  Function Description: This function calculates the numerical value for the first date using the occurance.
   305	*
   306	***************************************************************************/
   307	
   308	int firstDate(int occur)
   309	{
   310	  int firstDate; //defines a variable for the numerical year number
   311	  
   312	  firstDate = (occur - 1) * 7 + 1;
   313	  return firstDate;
   314	}
   315	
   316	/***************************************************************************
   317	*
   318	*  Function Information
   319	*
   320	*  Name of Function: dayStart()
   321	*
   322	*  Function Return Type: int
   323	*
   324	*  Parameters (list data type, name, and comment one per line):
   325	*    1. int year
   326	*
   327	*  Function Description: Calculates the value for the day of the week of the previous year.
   328	*
   329	***************************************************************************/
   330	
   331	int dayStart(int year)
   332	{
   333	  double dayStart; //defines the numerical value of the day from the previous year
   334	  double yearfl = year; //sets the year as a float
   335	  //calculates the start day
   336	  dayStart = ((yearfl - 1) * 365 + ((yearfl - 1) / 4) - ((yearfl - 1) / 100) + ((yearfl - 1) / 400));
   337	  dayStart = (int)dayStart % 7;
   338	  //adds one to the last day if the year is a leap year
   339	  if ((year - 1) % 4 == 0)
   340	  {
   341	    if ((year - 1) % 100 != 0 || (year - 1) % 400 == 0)
   342	    {
   343	      dayStart = dayStart + 1;
   344	    }
   345	  }
   346	  //printf("\nday start %lf",dayStart);
   347	  return(dayStart); //returns the start day as an int
   348	}
   349	
   350	/***************************************************************************
   351	*
   352	*  Function Information
   353	*
   354	*  Name of Function: month()
   355	*
   356	*  Function Return Type: void
   357	*
   358	*  Parameters (list data type, name, and comment one per line):
   359	*    1.int dayNumb  this variable is the numerical value for what day it is
   360	*    2.int year    this variable is the definition for the inputted year
   361	*    3.int *day   pass by variable defining the numerical day value
   362	*    4. int tracker   this variable is calculated in a previous function to set the dates correctly when in between years
   363	*
   364	
   365	*  Function Description:  This program calculates what month the desired day is 
   366	*                         using the numerical day and the inputted year.
   367	*
   368	***************************************************************************/
   369	
   370	int month(int dayNumb, int year, int *day, int tracker)
   371	{
   372	  int month_num; //defines a variable for the value of the month
   373	  
   374	  if (tracker == 1) //adjusts the day value if the occurence is inbetween years
   375	  {
   376	    dayNumb = dayNumb - 1;
   377	  } 
   378	  dayNumb = dayNumb - 31; //subtracts the number of the days in the month from the total days
   379	  
   380	  if (dayNumb <= 0) //uses an if statement to see if the number of days is in the selected month
   381	  {
   382	    printf("January"); //displays the selected month
   383	    printf(" %d",(dayNumb + 31)); //displays the date
   384	    *day = dayNumb + 31;
   385	    month_num = 1;
   386	  }
   387	  
   388	  if ((!(year % 4) && (year % 100)) || !(year % 400)) //checks if the year is a leap year
   389	  {
   390	    dayNumb = dayNumb - 29;
   391	    if (dayNumb <= 0 && dayNumb >= -29)
   392	    {
   393	      printf("February");
   394	      printf(" %d",(dayNumb + 29));
   395	      *day = dayNumb + 29;
   396	      month_num = 2;
   397	    }
   398	  }
   399	  
   400	  else 
   401	  {
   402	    dayNumb = dayNumb - 28;
   403	    if (dayNumb <= 0 && dayNumb >= -29)
   404	    {
   405	      printf("February");
   406	      printf(" %d",(dayNumb + 28));
   407	      *day = dayNumb + 28;
   408	      month_num = 2;
   409	    }
   410	  }
   411	  
   412	  dayNumb = dayNumb - 31;
   413	  if (dayNumb <= 0 && dayNumb >= -30)
   414	  {
   415	    printf("March");
   416	    printf(" %d",(dayNumb + 31));
   417	    month_num = 3;
   418	    *day = dayNumb + 31;
   419	  }
   420	  
   421	  dayNumb = dayNumb - 30;
   422	  if (dayNumb <= 0 && dayNumb >= -30)
   423	  {
   424	    printf("April");
   425	    printf(" %d",(dayNumb + 30));
   426	    month_num = 4;
   427	    *day = dayNumb + 30;
   428	  }
   429	  
   430	  dayNumb = dayNumb - 31;
   431	  if (dayNumb < 0 && dayNumb > -31)
   432	  {
   433	    printf("May");
   434	    printf(" %d",(dayNumb + 31));
   435	    month_num = 5;
   436	    *day = dayNumb + 31;
   437	  }
   438	  
   439	  dayNumb = dayNumb - 30;
   440	  if (dayNumb <= 0 && dayNumb > -30)
   441	  {
   442	    printf("June");
   443	    printf(" %d",(dayNumb + 30));
   444	    month_num = 6;
   445	    *day = dayNumb + 30;
   446	  }
   447	  
   448	  dayNumb = dayNumb - 31;
   449	  if (dayNumb <= 0 && dayNumb >= -30)
   450	  {
   451	    printf("July");
   452	    printf(" %d",(dayNumb + 31));
   453	    month_num = 7;
   454	    *day = dayNumb + 31;
   455	  }
   456	  
   457	  dayNumb = dayNumb - 31;
   458	  if (dayNumb <= 0 && dayNumb >= -30)
   459	  {
   460	    printf("August");
   461	    printf(" %d",(dayNumb + 31));
   462	    month_num = 8;
   463	    *day = dayNumb + 31;
   464	  }
   465	  
   466	  dayNumb = dayNumb - 30;
   467	  if (dayNumb <= 0 && dayNumb >= -30)
   468	  {
   469	    printf("September");
   470	    printf(" %d",(dayNumb + 30));
   471	    month_num = 9;
   472	    *day = dayNumb + 30;
   473	  }
   474	  
   475	  dayNumb = dayNumb - 31;
   476	  if (dayNumb <= 0 && dayNumb >= -30)
   477	  {
   478	    printf("October");
   479	    printf(" %d",(dayNumb + 31));
   480	    month_num = 10;
   481	    *day = dayNumb + 31;
   482	  }
   483	  
   484	  dayNumb = dayNumb - 30;
   485	  if (dayNumb <= 0 && dayNumb >= -30)
   486	  {
   487	    printf("November");
   488	    printf(" %d",(dayNumb + 30));
   489	    month_num = 11;
   490	    *day = dayNumb + 30;
   491	  }
   492	  
   493	  dayNumb = dayNumb - 31;
   494	  if (dayNumb <= 1 && dayNumb >= -30)
   495	  {
   496	    printf("December");
   497	    printf(" %d",(dayNumb + 31));
   498	    month_num = 12;
   499	    *day = dayNumb + 31;
   500	  }
   501	  
   502	  return month_num;
   503	}
   504	
   505	/***************************************************************************
   506	*
   507	*  Function Information
   508	*
   509	*  Name of Function:dayWeek()
   510	*
   511	*  Function Return Type:int
   512	*
   513	*  Parameters (list data type, name, and comment one per line):
   514	*    1.int dayNumb //variable defining the numerical value for the date
   515	*    2.int startDay //variable definining the numerical value for the start date
   516	*
   517	*  Function Description: This function displays the day of the week using inputted numerical day value and the first day
   518	*
   519	***************************************************************************/
   520	
   521	int dayWeek(int dayNumb, int startDay)
   522	{
   523	  int dow; //defines a variable for the day of the week
   524	  dow = dayNumb + startDay + 1; //calculates the day of the week using the first day of the week and the numerical value
   525	  if (dow % 7 == 0) //checks which day of the week it is using an if statement and displays the corresponding day
   526	  {
   527	    printf("Saturday ");
   528	  }
   529	  if(dow % 7 == 1)
   530	  {
   531	    printf("Sunday ");
   532	  }
   533	  if(dow % 7 == 2)
   534	  {
   535	    printf("Monday ");
   536	  }
   537	  if(dow % 7 == 3)
   538	  {
   539	    printf("Tuesday ");
   540	  }
   541	  if(dow % 7 == 4)
   542	  {
   543	    printf("Wednesday ");
   544	  }
   545	  if(dow % 7 == 5)
   546	  {
   547	    printf("Thursday ");
   548	  }
   549	  if(dow % 7 == 6)
   550	  {
   551	    printf("Friday ");
   552	  }
   553	  dow = dow % 7;
   554	  return(dow);
   555	}
   556	
   557	/***************************************************************************
   558	*
   559	*  Function Information
   560	*
   561	*  Name of Function:output()
   562	*
   563	*  Function Return Type: void
   564	*
   565	*  Parameters (list data type, name, and comment one per line):
   566	*
   567	*  Function Description: This function displays the the lines and days of the week in order.
   568	*
   569	***************************************************************************/
   570	
   571	void output()
   572	{
   573	  printf("\n-=-=-=-=-=-=-=-=-=-=-=-=-=-");
   574	  printf("\nSun Mon Tue Wed Thu Fri Sat\n");
   575	}
   576	
   577	/***************************************************************************
   578	*
   579	*  Function Information
   580	*
   581	*  Name of Function:outputWeek()
   582	*
   583	*  Function Return Type:void
   584	*
   585	*  Parameters (list data type, name, and comment one per line):
   586	*    1.int selector //
   587	*
   588	*  Function Description: Displays an output depending on the selector.
   589	*
   590	***************************************************************************/
   591	
   592	void outputWeek(int selector)
   593	{
   594	  if (selector == 1) //checks the selector
   595	  {
   596	    printf("\nStart of week: "); //displays the an output
   597	  }
   598	  else
   599	  {
   600	    printf("\nEnd of week: ");
   601	  }
   602	}
   603	
   604	/***************************************************************************
   605	*
   606	*  Function Information
   607	*
   608	*  Name of Function: outputYear()
   609	*
   610	*  Function Return Type:int
   611	*
   612	*  Parameters (list data type, name, and comment one per line):
   613	*    1.int year //defines a variable for the year
   614	*
   615	*  Function Description: Displays the year
   616	*
   617	***************************************************************************/
   618	
   619	void outputYear(int year)
   620	{
   621	  printf(", %d",year);
   622	}
   623	
   624	/***************************************************************************
   625	*
   626	*  Function Information
   627	*
   628	*  Name of Function: monthCalc()
   629	*
   630	*  Function Return Type: void
   631	*
   632	*  Parameters (list data type, name, and comment one per line):
   633	*    1.int month_num  //variable for the number of the month
   634	*
   635	*  Function Description: Displays the month with formatting depending on the month function.
   636	*
   637	***************************************************************************/
   638	
   639	void monthCalc(int month_num)
   640	{
   641	  printf("\n\n"); 
   642	  if (month_num == 1) //checks what month depending on the number 
   643	  {
   644	    printf("          January"); //displays the month
   645	  }
   646	  if (month_num == 2)
   647	  {
   648	    printf("         February");
   649	  }
   650	  if (month_num == 3)
   651	  {
   652	    printf("           March");
   653	  }
   654	  if (month_num == 4)
   655	  {
   656	    printf("           April");
   657	  }
   658	  if (month_num == 5)
   659	  {
   660	    printf("            May");
   661	  }
   662	  if (month_num == 6)
   663	  {
   664	    printf("           June");
   665	  }
   666	  if (month_num == 7)
   667	  {
   668	    printf("           July");
   669	  }
   670	  if (month_num == 8)
   671	  {
   672	    printf("          August");
   673	  }
   674	  if (month_num == 9)
   675	  {
   676	    printf("         September");
   677	  }
   678	  if (month_num == 10)
   679	  {
   680	    printf("          October");
   681	  }
   682	  if (month_num == 11)
   683	  {
   684	    printf("          November");
   685	  }
   686	  if (month_num == 12)
   687	  {
   688	    printf("         December");
   689	  }
   690	}
   691	
   692	/***************************************************************************
   693	*
   694	*  Function Information
   695	*
   696	*  Name of Function:printDates()
   697	*
   698	*  Function Return Type: void
   699	*
   700	*  Parameters (list data type, name, and comment one per line):
   701	*    1. int date //
   702	*    2. int first_day //
   703	*
   704	*  Function Description:
   705	*
   706	***************************************************************************/
   707	
   708	void printDates(int date, int first_day)
   709	{
   710	  int mod; //defines a variable for the modifier
   711	  if (first_day == 0) //if first day is 0 then change it to 7
   712	  {
   713	    first_day = 7;
   714	  }
   715	  if (date > 10) //checks if the date is greater than 10
   716	  {
   717	    mod = 4 * first_day - 1; //defines the gap for the spaces before
   718	    printf("%*d",mod,date); //displays the date
   719	  }
   720	  else
   721	  {
   722	    mod = 4 * first_day - 2; 
   723	    printf("%*d",mod,date);
   724	  }
   725	}