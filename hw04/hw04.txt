The following program submission has been recorded:

Student: dlender
Class: CS159
Section: 29958
Assignment: hw04.c
Submission: 2021-03-15 22:35

If the above is incorrect, you are responsible for resubmitting the assignment or seeking assistance from a course staff member prior to the due date! Assignments will never be accepted by e-mail.

If this is for a lab assignment, only one member must be designated to make a submission for the group.  Graders will not evaluate submissions from multiple group members to determine which effort you actually want graded.

*** Please do not reply to this email ***

The contents of the submission:
     1	
     2	/***************************************************************************
     3	*
     4	*  Programmer and Purdue Email Address:
     5	*  1. dlender@purdue.edu
     6	*
     7	*  Homework #: 4
     8	*
     9	*  Academic Integrity Statement:
    10	*
    11	*  I have not used source code obtained from any other unauthorized source, 
    12	*  either modified or unmodified.  Neither have I provided access to my code 
    13	*  to another. The effort I am submitting is my own original work.
    14	*
    15	*  Day, Time, Location of Lab: Monday 1:30 SC
    16	*
    17	*  Program Description: This program takes in the year, value for the day of the week
    18	*  and the number of occurences, then displays the calculated date.
    19	*
    20	***************************************************************************/
    21	
    22	#include<stdio.h>
    23	#include<math.h>
    24	
    25	int getYear();
    26	double getWeekNumb();
    27	double getOccur();
    28	int dayStart(int year);
    29	int dayFinal(int occurNumb, int dayStart, int dayInitial);
    30	void month(int dayNumb, int year);
    31	void dayWeek(int dow, int year);
    32	void output(int occur);
    33	
    34	int main()
    35	{
    36	  int weekNumb; //defines the number for the day of the week
    37	  int year; //defines the variable for the year
    38	  int startDay; //defiens the variable for the numeric first day
    39	  int occurNumb; //defines the number of occurences
    40	  int dayNumb; //defines the numeric value of the date
    41	
    42	  //executes the user-defined functions to calculate and display the final results
    43	  year = getYear();
    44	  weekNumb = getWeekNumb();
    45	  occurNumb = getOccur();
    46	  startDay = dayStart(year);
    47	  dayNumb = dayFinal(occurNumb,startDay,weekNumb);
    48	  output(occurNumb);
    49	  dayWeek(weekNumb, year);
    50	  month(dayNumb,year);
    51	  return(0);
    52	}
    53	
    54	/***************************************************************************
    55	*
    56	*  Function Information
    57	*
    58	*  Name of Function: getYear()
    59	*
    60	*  Function Return Type: int
    61	*
    62	*  Parameters (list data type, name, and comment one per line):
    63	*
    64	*  Function Description: Prompts for the year and saves it.
    65	*
    66	***************************************************************************/
    67	
    68	int getYear()
    69	{
    70	  int year; //defines the variable for the year
    71	  //displays the prompt and defines the number for the year
    72	  printf("Enter year number -> ");
    73	  scanf("%d",&year);
    74	  return year;
    75	}
    76	
    77	/***************************************************************************
    78	*
    79	*  Function Information
    80	*
    81	*  Name of Function: getWeekNumb()
    82	*
    83	*  Function Return Type: double
    84	*
    85	*  Parameters (list data type, name, and comment one per line):
    86	*
    87	*  Function Description: 
    88	*  Prompts for the day of the week number and save it.
    89	***************************************************************************/
    90	
    91	double getWeekNumb()
    92	{
    93	  double weekNumb; //defines the variable for the numerical day of the week 
    94	  //displays the prompt and defines the number for the day of the week
    95	  printf("Enter day of week number -> ");
    96	  scanf("%lf",&weekNumb);
    97	  return weekNumb;
    98	}
    99	
   100	/***************************************************************************
   101	*
   102	*  Function Information
   103	*
   104	*  Name of Function: getOccur()
   105	*
   106	*  Function Return Type: double
   107	*
   108	*
   109	*  Function Description: Prompts for the occurrence and saves it.
   110	*
   111	***************************************************************************/
   112	
   113	double getOccur()
   114	{
   115	  double occur; //defines the value for the number of occurences
   116	  //displays and defines the number of occurences
   117	  printf("Enter occurrence number -> ");
   118	  scanf("%lf",&occur);
   119	  return occur;
   120	}
   121	
   122	/***************************************************************************
   123	*
   124	*  Function Information
   125	*
   126	*  Name of Function: dayStart()
   127	*
   128	*  Function Return Type: int
   129	*
   130	*  Parameters (list data type, name, and comment one per line):
   131	*    1. int year
   132	*
   133	*  Function Description: Calculates the value for the day of the week of the previous year.
   134	*
   135	***************************************************************************/
   136	
   137	int dayStart(int year)
   138	{
   139	  double dayStart; //defines the numerical value of the day from the previous year
   140	  double yearfl = year; //sets the year as a float
   141	  //calculates the start day
   142	  dayStart = ((yearfl - 1) * 365 + ((yearfl - 1) / 4) - ((yearfl - 1) / 100) + ((yearfl - 1) / 400));
   143	  dayStart = (int)dayStart % 7;
   144	  //adds one to the last day if the year is a leap year
   145	  if ((year - 1) % 4 == 0)
   146	  {
   147	    if ((year - 1) % 100 != 0 || (year - 1) % 400 == 0)
   148	    {
   149	      dayStart = dayStart + 1;
   150	    }
   151	  }
   152	  return(dayStart); //returns the start day as an int
   153	}
   154	
   155	/***************************************************************************
   156	*
   157	*  Function Information
   158	*
   159	*  Name of Function: dayFinal()
   160	*
   161	*  Function Return Type: int
   162	*
   163	*  Parameters (list data type, name, and comment one per line):
   164	*    1. int occurNumb  this variable defines the number of occurences that took place
   165	*    2. int dayStart    this variable defines the value for the last day of the previous year
   166	*    3. int dayInitial   this variable defines the value for the first day of the current year
   167	*
   168	*  Function Description: This function calculates the value for what numerical number the desired day is.
   169	*
   170	***************************************************************************/
   171	
   172	int dayFinal(int occurNumb, int dayStart, int dayInitial)
   173	{
   174	  int occur; //defines a new variable for occurences
   175	  int dayNumb; //defines a variable for the numeriucal value of the date
   176	  //calculates the number of days and returns it as an int value
   177	  occur = occurNumb - 1;
   178	  if (dayInitial > dayStart) 
   179	  {  
   180	    occur = occur - 1;
   181	  }
   182	  dayNumb = occur * 7 + (7 - (dayStart + 1)) + dayInitial + 1;
   183	  return(dayNumb);
   184	}
   185	
   186	/***************************************************************************
   187	*
   188	*  Function Information
   189	*
   190	*  Name of Function: month()
   191	*
   192	*  Function Return Type: void
   193	*
   194	*  Parameters (list data type, name, and comment one per line):
   195	*    1.int dayNumb  this variable is the numerical value for what day it is
   196	*    2.int year    this variable is the definition for the inputted year
   197	*
   198	*  Function Description:  This program calculates what month the desired day is 
   199	*                         using the numerical day and the inputted year.
   200	*
   201	***************************************************************************/
   202	
   203	void month(int dayNumb, int year)
   204	{
   205	  dayNumb = dayNumb - 31; //subtracts the number of the days in the month from the total days
   206	  if (dayNumb <= 0) //uses an if statement to see if the number of days is in the selected month
   207	  {
   208	    printf("January"); //displays the selected month
   209	    printf(" %d",(dayNumb + 31)); //displays the date
   210	  }
   211	  if ((!(year % 4) && (year % 100)) || !(year % 400)) //checks if the year is a leap year
   212	  {
   213	    dayNumb = dayNumb - 29;
   214	    if (dayNumb <= 0 && dayNumb >= -29)
   215	    {
   216	      printf("February");
   217	      printf(" %d",(dayNumb + 29));
   218	    }
   219	  }
   220	  else 
   221	  {
   222	    dayNumb = dayNumb - 28;
   223	    if (dayNumb <= 0 && dayNumb >= -29)
   224	    {
   225	      printf("February");
   226	      printf(" %d",(dayNumb + 28));
   227	    }
   228	  }
   229	  dayNumb = dayNumb - 31;
   230	  if (dayNumb <= 0 && dayNumb >= -30)
   231	  {
   232	    printf("March");
   233	    printf(" %d",(dayNumb + 31));
   234	  }
   235	  dayNumb = dayNumb - 30;
   236	  if (dayNumb <= 0 && dayNumb >= -30)
   237	  {
   238	    printf("April");
   239	    printf(" %d",(dayNumb + 30));
   240	  }
   241	  dayNumb = dayNumb - 31;
   242	  if (dayNumb <= 0 && dayNumb >= -31)
   243	  {
   244	    printf("May");
   245	    printf(" %d",(dayNumb + 31));
   246	  }
   247	  dayNumb = dayNumb - 30;
   248	  if (dayNumb < 0 && dayNumb > -30)
   249	  {
   250	    printf("June");
   251	    printf(" %d",(dayNumb + 30));
   252	  }
   253	  dayNumb = dayNumb - 31;
   254	  if (dayNumb <= 0 && dayNumb >= -30)
   255	  {
   256	    printf("July");
   257	    printf(" %d",(dayNumb + 31));
   258	  }
   259	  dayNumb = dayNumb - 31;
   260	  if (dayNumb <= 0 && dayNumb >= -30)
   261	  {
   262	    printf("August");
   263	    printf(" %d",(dayNumb + 31));
   264	  }
   265	  dayNumb = dayNumb - 30;
   266	  if (dayNumb <= 0 && dayNumb >= -30)
   267	  {
   268	    printf("September");
   269	    printf(" %d",(dayNumb + 30));
   270	  }
   271	  dayNumb = dayNumb - 31;
   272	  if (dayNumb <= 0 && dayNumb >= -30)
   273	  {
   274	    printf("October");
   275	    printf(" %d",(dayNumb + 31));
   276	  }
   277	  dayNumb = dayNumb - 30;
   278	  if (dayNumb <= 0 && dayNumb >= -30)
   279	  {
   280	    printf("November");
   281	    printf(" %d",(dayNumb + 30));
   282	  }
   283	  dayNumb = dayNumb - 31;
   284	  if (dayNumb <= 1 && dayNumb >= -30)
   285	  {
   286	    printf("December");
   287	    printf(" %d",(dayNumb + 31));
   288	  }
   289	}
   290	
   291	/***************************************************************************
   292	*
   293	*  Function Information
   294	*
   295	*  Name of Function: dayWeek()
   296	*
   297	*  Function Return Type:
   298	*
   299	*  Parameters (list data type, name, and comment one per line):
   300	*    1. int dow   variable representing the numeric day of the week
   301	*    2. int year   variable representing the year
   302	*
   303	*  Function Description: This function calculates and prints the day of the week using the inputted value.
   304	*
   305	***************************************************************************/
   306	
   307	void dayWeek(int dow, int year)
   308	{
   309	  if (dow == 0)
   310	  //uses if statements to see if the day of the week is equal to the value, then displays the year and day of the week in text
   311	  {
   312	    printf("Sunday in %d: ",year);
   313	  }
   314	
   315	  if (dow == 1)
   316	  {
   317	    printf("Monday in %d: ",year);
   318	  }
   319	
   320	  if (dow == 2)
   321	  {
   322	    printf("Tuesday in %d: ",year);
   323	  }
   324	
   325	  if (dow == 3)
   326	  {
   327	    printf("Wednesday in %d: ",year);
   328	  }
   329	
   330	  if (dow == 4)
   331	  {
   332	    printf("Thursday in %d: ",year);
   333	  }
   334	
   335	  if (dow == 5)
   336	  {
   337	    printf("Friday in %d: ",year);
   338	  }
   339	
   340	  if (dow == 6)
   341	  {
   342	    printf("Saturday in %d: ",year);
   343	  }
   344	}
   345	
   346	/***************************************************************************
   347	*
   348	*  Function Information
   349	*
   350	*  Name of Function: output()
   351	*
   352	*  Function Return Type: void
   353	*
   354	*  Parameters (list data type, name, and comment one per line):
   355	*    1.int occur   variable defining the number of occurence that take place
   356	*
   357	*  Function Description: Displays the text and number of occurences for the display.
   358	*
   359	***************************************************************************/
   360	
   361	void output(int occur)
   362	//displays the final text and number of occurences
   363	{
   364	  printf("\nDesired occurrence #%d of ",occur);
   365	}